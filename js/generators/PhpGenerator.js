/**
 * @author johnsonj <me@justinjohnson.org>
 */
PhpGenerator = (function() {
	function getMethodPrefixes(property) {
		var prefixes = [];
		
		if (property.useSet) {
			prefixes.push("set");
		}
		
		if (property.useGet) {
			if (property.isBoolean) {
				prefixes.push("is");
			}
			else {
				prefixes.push("get");
			}
		}
		
		return prefixes;
	}
	
	function getMethodArguments(prefix, identifier) {
		if (prefix == "set") {
			return "($" + identifier + ")";
		}
		
		return "()";
	}
	
	function getMethodBody(prefix, identifier) {
		if (prefix == "set") {
			return "$this->" + identifier + " = $" + identifier + ";";
		}
		
		return "return $this->" + identifier + ";";
	}
	
	function PhpGenerator(config) {
		this.config = config;
		this.formatter = new Formatter(config);
	}
	
	PhpGenerator.prototype.generate = function() {
		var f = this.formatter,
			c = this.config;
		
		// Class header
		f.writeln("<?php")
			.writeln("/**")
			.writeln(" * Generated by model-generator on " + new Date())
			.writeln(" */")
			.openBlock("class " + c.className);
			
		// Declare the properties	
		$.each(this.config.properties, function(i, property) {
			f.writeln(c.defaultScope + " $" + f.propertyName(property.name) + ";");
		});
		
		f.writeln();
			
		// Write the getters and setters
		$.each(this.config.properties, function(i, property) {
			var prefixes = getMethodPrefixes(property);
			
			$.each(prefixes, function(j, prefix) {
				var identifier = f.propertyName(property.name);
				
				f.openBlock("public function " + f.propertyName(prefix + " " + property.name) + getMethodArguments(prefix, identifier))
					.writeln(getMethodBody(prefix, identifier))
					.closeBlock()
					
				if (i + 1 != c.properties.length || j + 1 != prefixes.length) {
					f.writeln();
				}
			});
		});
			
		return f.closeBlock()
			.toString();
	};

	return PhpGenerator;
}());